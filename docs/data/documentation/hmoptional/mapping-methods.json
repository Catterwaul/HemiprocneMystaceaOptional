{"identifier":{"url":"doc:\/\/HMOptional\/documentation\/HMOptional\/Mapping-Methods","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/HMOptional\/documentation\/HMOptional"]]},"sections":[],"variants":[{"paths":["\/documentation\/hmoptional\/mapping-methods"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"HMOptional"}],"title":"Mapping Methods"},"seeAlsoSections":[{"identifiers":["doc:\/\/HMOptional\/documentation\/HMOptional\/Swift\/Optional"],"generated":true}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Unlike with "},{"type":"codeVoice","code":"Result"},{"type":"text","text":", the standard library supports "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional#Transforming-an-Optional-Value","type":"reference","isActive":true},{"type":"text","text":" to an adequate level. No additional code is required by this package."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But, it is useful to understand how the mapping possibilities for "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" differ from "},{"type":"codeVoice","code":"Result"},{"type":"text","text":", as documented in "},{"identifier":"https:\/\/catterwaul.github.io\/HemiprocneMystaceaResult\/documentation\/hmresult\/mapping-methods","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"flatMap","level":3,"type":"heading","text":"flatMap"},{"inlineContent":[{"text":"Unlike with ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":", ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional\/flatmap(_:)","isActive":true,"type":"reference"},{"text":" is implemented perfectly in the standard library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/optionalchaining\/","isActive":true},{"type":"text","text":" represents a specific subset of "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":"—the most common use case. It would be great if other “throwing property wrappers” could use chaining as well, but is of course not supported."}],"type":"paragraph"},{"syntax":"swift","code":["let animals: Optional = \"🦁🐯🐻\"","var first: Character? = animals.flatMap(\\.first)","first = animals?.first \/\/ Same as above."],"type":"codeListing"},{"anchor":"flatMapAndMergeError","level":3,"type":"heading","text":"flatMapAndMergeError"},{"inlineContent":[{"text":"In ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/Catterwaul\/Thrappture"},{"text":", we’ve defined ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" type as ","type":"text"},{"text":"`Nil`","type":"text"},{"text":". But regardless of how you model it,","type":"text"},{"text":" ","type":"text"},{"code":"Optional.none","type":"codeVoice"},{"text":" is generic over ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" itself. That means that the only way for two ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" types to “share their failure type”, is for the ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":"s to actually be of the exact same type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"So, "},{"type":"codeVoice","code":"flatMapAndMergeError"},{"type":"text","text":" would be simplifiable to the following. We haven’t felt a need to include this in this package, but are open to doing so if you could convince us of its usefulness."}],"type":"paragraph"},{"syntax":"swift","code":["func flatMapAndMergeError(","  _ transform: (Wrapped) throws(Nil) -> Self",") -> Self {","  try? transform(get())","}"],"type":"codeListing"},{"anchor":"map","level":3,"type":"heading","text":"map"},{"inlineContent":[{"type":"text","text":"Again, unlike with "},{"code":"Result","type":"codeVoice"},{"type":"text","text":", "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional\/map(_:)","type":"reference"},{"type":"text","text":" is implemented perfectly in the standard library."}],"type":"paragraph"},{"anchor":"mapAndMergeError","level":3,"type":"heading","text":"mapAndMergeError"},{"inlineContent":[{"text":"Because Swift allows for values to be implicitly promoted to optionals, the body of ","type":"text"},{"type":"codeVoice","code":"Optional.mapAndMergeError"},{"text":" would be exactly the same as ","type":"text"},{"type":"codeVoice","code":"Optional.flatMapAndMergeError"},{"text":"‘s’, above. So we’re not including this method either.","type":"text"}],"type":"paragraph"},{"anchor":"flatMapFailure","level":4,"type":"heading","text":"flatMapFailure"},{"inlineContent":[{"code":"Optional","type":"codeVoice"},{"text":" cannot make use of this by itself, because its ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" type always matches its ","type":"text"},{"code":"Wrapped","type":"codeVoice"},{"text":" type. I.e. transforming one ","type":"text"},{"code":"Optional.Nil","type":"codeVoice"},{"text":" to another is the same as transforming one ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" to another. That requires a ","type":"text"},{"code":"flatMap","type":"codeVoice"},{"text":". And, a transformation of ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", if you want to do anything other than change one ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" into ","type":"text"},{"code":"another","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can’t do much meaningful using ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" as an input, but there is syntactical sugar available to “transform it”—the ","type":"text"},{"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/basicoperators\/#Nil-Coalescing-Operator","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A combination of "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":", nil-coalescing, and implicit promotion to optionals is not only about the closest you can get to "},{"type":"codeVoice","code":"flatMapError"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":"—it’s also a practical usage of the “general transformation” methods that start off "},{"identifier":"https:\/\/catterwaul.github.io\/HemiprocneMystaceaResult\/documentation\/hmresult\/mapping-methods","isActive":true,"type":"reference","overridingTitle":"the Result mapping article","overridingTitleInlineContent":[{"type":"text","text":"the Result mapping article"}]},{"type":"text","text":"—just with a different spelling."}],"type":"paragraph"},{"syntax":"swift","code":["let characters: Optional = \"🦁🐯🐻\"","let character: Character? = characters.flatMap { \"\\($0)👧🏻👠🐒🪽\".randomElement() } ?? \"🧙‍♀️\""],"type":"codeListing"},{"anchor":"mapFailureToSuccess","level":4,"type":"heading","text":"mapFailureToSuccess"},{"inlineContent":[{"text":"This is nil-coalescing, specifically when the result is non-optional.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"inlineContent":[{"type":"text","text":"Important to note:"}],"type":"strong"}]},{"type":"text","text":" while nil-coalescing allows for completely removing "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" wrappers, you’ll sometimes need to use "},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":", instead of "},{"type":"codeVoice","code":"map"},{"type":"text","text":", to flatten optionality down to one level of wrapping, first."}],"type":"paragraph"},{"syntax":"swift","code":["let characters: Optional = \"🦁🐯🐻👧🏻👠🐒🪽\"","characters?.randomElement() ?? \"🧙‍♀️\"               \/\/ Character","characters.flatMap { $0.randomElement() } ?? \"🧙‍♀️\" \/\/ Character","characters.map { $0.randomElement() } ?? \"🧙‍♀️\"     \/\/ Character?"],"type":"codeListing"},{"anchor":"mapFailureToSuccessAndErrorToFailure","level":4,"type":"heading","text":"mapFailureToSuccessAndErrorToFailure"},{"inlineContent":[{"text":"This is nil-coalescing, when the argument on the right of the ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" is also optional.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"Success"},{"type":"text","text":" can’t change, and "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is tied to "},{"type":"codeVoice","code":"Success"},{"type":"text","text":", for "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":", "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" can’t change either."}],"type":"paragraph"},{"syntax":"swift","code":["let characters: Optional = \"🦁🐯🐻👧🏻👠🐒🪽\"","let character: Character? = \"🧙‍♀️\"","characters?.randomElement() ?? character  \/\/ Character?"],"type":"codeListing"}]}],"references":{"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/basicoperators\/#Nil-Coalescing-Operator","title":"nil-coalescing operator","titleInlineContent":[{"text":"nil-coalescing operator","type":"text"}],"url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/basicoperators\/#Nil-Coalescing-Operator","type":"link"},"doc://HMOptional/documentation/HMOptional":{"abstract":[{"type":"text","text":"Extended functionality for "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional"},{"type":"text","text":"."}],"kind":"symbol","url":"\/documentation\/hmoptional","identifier":"doc:\/\/HMOptional\/documentation\/HMOptional","title":"HMOptional","type":"topic","role":"collection"},"https://catterwaul.github.io/HemiprocneMystaceaResult/documentation/hmresult/mapping-methods":{"url":"https:\/\/catterwaul.github.io\/HemiprocneMystaceaResult\/documentation\/hmresult\/mapping-methods","title":"HemiprocneMystaceaResult","identifier":"https:\/\/catterwaul.github.io\/HemiprocneMystaceaResult\/documentation\/hmresult\/mapping-methods","type":"link","titleInlineContent":[{"text":"HemiprocneMystaceaResult","type":"text"}]},"https://github.com/Catterwaul/Thrappture":{"url":"https:\/\/github.com\/Catterwaul\/Thrappture","title":"Thrappture","identifier":"https:\/\/github.com\/Catterwaul\/Thrappture","type":"link","titleInlineContent":[{"text":"Thrappture","type":"text"}]},"https://developer.apple.com/documentation/swift/optional":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/optional","title":"Optional","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional","type":"link","titleInlineContent":[{"text":"Optional","type":"text"}]},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/optionalchaining/":{"url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/optionalchaining\/","title":"Optional chaining","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/optionalchaining\/","type":"link","titleInlineContent":[{"text":"Optional chaining","type":"text"}]},"https://developer.apple.com/documentation/swift/optional#Transforming-an-Optional-Value":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/optional#Transforming-an-Optional-Value","title":"Optional mapping","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional#Transforming-an-Optional-Value","type":"link","titleInlineContent":[{"code":"Optional","type":"codeVoice"},{"text":" mapping","type":"text"}]},"https://developer.apple.com/documentation/swift/optional/map(_:)":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/optional\/map(_:)","title":"Optional.map","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional\/map(_:)","type":"link","titleInlineContent":[{"code":"Optional.map","type":"codeVoice"}]},"https://developer.apple.com/documentation/swift/optional/flatmap(_:)":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/optional\/flatmap(_:)","title":"Optional.flatMap","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optional\/flatmap(_:)","type":"link","titleInlineContent":[{"code":"Optional.flatMap","type":"codeVoice"}]},"doc://HMOptional/documentation/HMOptional/Swift/Optional":{"navigatorTitle":[{"text":"Optional","kind":"identifier"}],"fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Sq","text":"Optional","kind":"identifier"}],"identifier":"doc:\/\/HMOptional\/documentation\/HMOptional\/Swift\/Optional","title":"Optional","type":"topic","kind":"symbol","abstract":[],"role":"symbol","url":"\/documentation\/hmoptional\/swift\/optional"}}}